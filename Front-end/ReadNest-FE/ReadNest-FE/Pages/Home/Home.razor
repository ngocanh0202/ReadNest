@inject ReadNest_FE.Store.Store Store
@inject ReadNest_FE.Router.Router Router
@inject ReadNest_FE.Interfaces.INovelService NovelService
@inject ReadNest_FE.Interfaces.IReadingHistoryService ReadingHistoryService
@using ReadNest_Models
@using ReadNest_FE.Components.CardNovel
@using ReadNest_FE.Components.Slide
@using ReadNest_FE.Dictionaries
@page "/"

<PageTitle>Home</PageTitle>

<div class="container !px-2">
    <Slide slides="@novelRandom"></Slide>
    @if (Store.IsModeReader && readingHistories is not null && readingHistories.Any())
    {
        <div class="!my-[2rem] flex items-center gap-2 font-bold">
            <a href="@Router.HistoryUrl" class="btn-icon danger !text-white">
                <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em"><path d="M16 2L20.9997 7L21 20.9925C21 21.5489 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5447 3 21.0082V2.9918C3 2.44405 3.44749 2 3.9985 2H16ZM15 4H5V20H19V8H15V4ZM13 9V13H16V15H11V9H13Z"></path></svg>            </a>
            <p class="underline !text-lg !flex !flex-col !gap-1">
                <div>History</div>
                <div class="!h-[5px] !w-full !bg-red-300"></div>
            </p>
        </div>
        <div class="flex flex-col gap-2">
            @for (int i = 0; i < Math.Min(readingHistories.Count, 3); i++)
            {
                var item = readingHistories[i];
                <div class="flex !gap-3 !p-3 cursor-pointer transition-colors border-b border-[var(--border-color)]
                                            hover:bg-[var(--bg-secondary)] last:border-b-0">
                    <div class="flex-shrink-0 w-20 h-20 rounded-lg overflow-hidden bg-[var(--bg-secondary)] flex items-center justify-center">
                        @if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" alt="@item.Id" class="w-full h-full object-cover" />
                        }
                        else
                        {
                            <div class="w-full h-full flex items-center justify-center text-[var(--text-secondary)]">
                                <svg class="w-8 h-8" viewBox="0 0 24 24" fill="none">
                                    <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20" stroke="currentColor" stroke-width="2" />
                                    <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z" stroke="currentColor" stroke-width="2" />
                                </svg>
                            </div>
                        }
                    </div>
                    <div class="flex-1 min-w-0 flex flex-col justify-center gap-1">
                        <a href="@Router.NovelUrl.Replace("{id}", item.NovelId)"
                           class="text-[15px] font-semibold text-[var(--text-primary)] m-0 overflow-hidden text-ellipsis whitespace-nowrap">
                            @item.NameNovel
                        </a>
                        <p class="text-[13px] text-[var(--text-secondary)] m-0 overflow-hidden text-ellipsis whitespace-nowrap">
                            @item.NameVolumn
                        </p>
                        <a href="@Router.ChapterUrl.Replace("{id}", item.ChapterId)"
                           class="text-[13px] text-[var(--text-secondary)] m-0 overflow-hidden text-ellipsis whitespace-nowrap">
                            @item.NameChapter
                        </a>
                    </div>
                </div>
            }
        </div>
    }

    <div class="!my-[2rem] flex items-center gap-2 font-bold">
        <button class="btn-icon danger !text-white" disabled>
            <svg stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" height="1em" width="1em"><path d="M5 4m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v14a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z"></path><path d="M9 4m0 1a1 1 0 0 1 1 -1h2a1 1 0 0 1 1 1v14a1 1 0 0 1 -1 1h-2a1 1 0 0 1 -1 -1z"></path><path d="M5 8h4"></path><path d="M9 16h4"></path><path d="M13.803 4.56l2.184 -.53c.562 -.135 1.133 .19 1.282 .732l3.695 13.418a1.02 1.02 0 0 1 -.634 1.219l-.133 .041l-2.184 .53c-.562 .135 -1.133 -.19 -1.282 -.732l-3.695 -13.418a1.02 1.02 0 0 1 .634 -1.219l.133 -.041z"></path><path d="M14 9l4 -1"></path><path d="M16 16l3.923 -.98"></path></svg>
        </button>
        <p class="underline !text-lg !flex !flex-col !gap-1">
            <div>Novels</div>
            <div class="!h-[5px] !w-full !bg-red-300"></div>
        </p>
    </div>
    <div class="novel-grid grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
        @if (novels is not null && novels.Any())
        {
            foreach(var n in novels)
            {
                <CardNovel novel="@n"></CardNovel>
            }
        }
    </div>
    <div class="!mb-[2rem] !flex flex-col !justify-between !items-center">
        @if (Page != TotalPage)
        {
            <hr class="!my-3 !border-[color:var(--bg-secondary)]">
            <button class="btn-second !w-[200px]"
                    disabled="@IsLoading"
                    @onclick:stopPropagation="true"
                    @onclick="() => HandleLoadNovel(Page, PageSize)">
                @if (IsLoading)
                {
                    <span class="loader"></span>
                }
                else
                {
                    <text>Load more</text>
                }
            </button>
        }
    </div>
</div>

@code {
    [CascadingParameter] MainLayout? mainLayout { get; set; }
    Response<NovelHomePage>? response { get; set; }
    List<NovelResponese> novels { get; set; } = new();
    List<ReadingHistoryDto> readingHistories { get; set; } = new();
    List<OverviewNovel> novelRandom { get; set; } = new();
    bool IsLoading = false;
    int Page = 1;
    int PageSize = 8;
    int TotalPage = 0;
    protected override async Task OnInitializedAsync()
    {
        mainLayout?.SetLoading(true);
        try
        {
            response = await NovelService.GetNovelsInHomePage(Page, PageSize);
            if (response is null) return;
            if (response.Success)
            {
                novels = response!.Data!.PaginationData!.Rows;
                TotalPage = response!.Data!.PaginationData!.TotalPages;
                novelRandom = response!.Data!.RandomNovel!;
            }
            await LoadHistory();
        }
        catch (Exception ex)
        {
            mainLayout?.ShowAlert(ex.Message, "error");
        }
        finally
        {
            mainLayout?.SetLoading(false);
        }
    }

    private async Task LoadHistory()
    {
        try
        {
            if(Store.readingHistories is null)
            {
                var response = await ReadingHistoryService.Get();
                if(response is not null)
                {
                    readingHistories = response.Data!;
                }                
            }
            else
            {
                readingHistories = Store.readingHistories;
            }

        }catch(Exception ex)
        {
            mainLayout?.ShowAlert(ex.Message, "error");
        }
    }

    private async Task HandleLoadNovel(int page, int pageSize)
    {
        IsLoading = true;
        Page = page + 1;
        var result = await NovelService.GetValue(string.Empty, Page, PageSize);
        if (result.Success)
        {
            TotalPage = result.Data!.TotalPages;
            if (result!.Data!.Rows.Any())
                novels?.AddRange(result!.Data!.Rows);
        }
        else
        {
            mainLayout?.ShowAlert(result.Message, "error");
        }
        IsLoading = false;
    }
}