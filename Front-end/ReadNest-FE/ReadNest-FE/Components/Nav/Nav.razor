@using ReadNest_FE.Components.InputSearch
@inherits LayoutComponentBase
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject ReadNest_FE.Router.Router Router
@inject ReadNest_FE.Store.Store Store
@inject ReadNest_FE.Interfaces.IAuthService AuthService
@implements IDisposable

<nav class="main-nav @(isNavVisible ? "visible" : "hidden")">
    <div class="nav-container">
        <div class="nav-brand">
            <a href="/" class="brand-link">
                <svg class="brand-icon-svg" viewBox="0 0 24 24" fill="none">
                    <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <span>@(Store.IsModeAction ? "Action" : "ReadNest")</span>
            </a>
        </div>

        <div class="nav-search">
            <InputSearch></InputSearch>
        </div>

        <div class="nav-menu">
            <a href="@Router.HomeUrl"
               class="nav-link @(Navigation.ToBaseRelativePath(Navigation.Uri) == "" || Navigation.ToBaseRelativePath(Navigation.Uri) == "/" ? "active" : "")">
                Home
            </a>
            <a href="@Router.ProfileUrl"
               class="nav-link @(Navigation.Uri.Contains(Router.ProfileUrl!, StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                Profile
            </a>
            <a href="@Router.ImagesUrl"
               class="nav-link @(Navigation.Uri.Contains(Router.ImagesUrl!, StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                Images
            </a>
            <a href="#" class="nav-link @(Navigation.Uri.Contains(Router.None!, StringComparison.OrdinalIgnoreCase) ? "active" : "")">
                Bookmarks
            </a>
            <div class="theme-toggle-wrapper">
                <input type="checkbox" id="theme-toggle" @onchange="ToggleTheme" checked="@isDarkMode" />
                <label for="theme-toggle" class="toggle-label">
                    <span class="toggle-slider">
                        <svg class="sun-icon" viewBox="0 0 24 24" fill="none">
                            <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" />
                            <path d="M12 1v6m0 6v6m11-11h-6m-6 0H1m16.5 9l-4.2-4.2M6.7 6.7l-4.2-4.2m0 14.2l4.2-4.2m10.6 0l4.2 4.2" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                        </svg>
                        <svg class="moon-icon" viewBox="0 0 24 24" fill="none">
                            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </span>
                </label>
            </div>

            @if ((Store.HasContributePermission == true && Store.HasContributePermission is not null) && Store.IsModeAction )
            {
                <a @onclick="OnClickButtonPostNovel" class="btn-post-novel">
                    <svg class="post-icon" viewBox="0 0 24 24" fill="none">
                        <path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <span>Post Novel</span>
                </a>                
            }
            <a class="nav-link" @onclick="Logout">
                <svg class="logout-icon" viewBox="0 0 24 24" fill="none">
                    <path d="M15 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h10"
                          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    <path d="M19 12H9m10 0-3-3m3 3-3 3"
                          stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </a>
        </div>

        <button class="mobile-menu-btn" @onclick="ToggleMobileMenu">
            <svg viewBox="0 0 24 24" fill="none">
                <path d="M3 12h18M3 6h18M3 18h18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
        </button>

    </div>
    <div class="mobile-menu @(isMobileMenuOpen ? "open" : "")">
        <a @onclick="ToggleMobileMenu" href="@Router.HomeUrl"
           class="nav-link @(Navigation.ToBaseRelativePath(Navigation.Uri) == "" || Navigation.ToBaseRelativePath(Navigation.Uri) == "/" ? "active" : "")">
            Home
        </a>
        <a @onclick="ToggleMobileMenu" href="@Router.ProfileUrl"
           class="nav-link @(Navigation.Uri.Contains(Router.ProfileUrl!, StringComparison.OrdinalIgnoreCase) ? "active" : "")">
            Profile
        </a>
        <a @onclick="ToggleMobileMenu" href="@Router.ImagesUrl"
           class="nav-link @(Navigation.Uri.Contains(Router.ImagesUrl!, StringComparison.OrdinalIgnoreCase) ? "active" : "")">
            Images
        </a>
        <a @onclick="ToggleMobileMenu" href="#" class="nav-link @(Navigation.Uri.Contains(Router.None!, StringComparison.OrdinalIgnoreCase) ? "active" : "")">
            Bookmarks
        </a>

        <div class="theme-toggle-wrapper mobile">
            <span class="theme-label">Theme</span>
            <input type="checkbox" id="theme-toggle-mobile" @onchange="ToggleTheme" checked="@isDarkMode" />
            <label for="theme-toggle-mobile" class="toggle-label">
                <span class="toggle-slider">
                    <svg class="sun-icon" viewBox="0 0 24 24" fill="none">
                        <circle cx="12" cy="12" r="5" stroke="currentColor" stroke-width="2" />
                        <path d="M12 1v6m0 6v6m11-11h-6m-6 0H1m16.5 9l-4.2-4.2M6.7 6.7l-4.2-4.2m0 14.2l4.2-4.2m10.6 0l4.2 4.2" stroke="currentColor" stroke-width="2" stroke-linecap="round" />
                    </svg>
                    <svg class="moon-icon" viewBox="0 0 24 24" fill="none">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </span>
            </label>
        </div>
        @if ((Store.HasContributePermission == true && Store.HasContributePermission is not null) && Store.IsModeAction)
        {
            <a @onclick="() => { ToggleMobileMenu(); OnClickButtonPostNovel();}" class="btn-post-novel mobile">
                <svg class="post-icon" viewBox="0 0 24 24" fill="none">
                    <path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
                <span>Post Novel</span>
            </a>
        }
        <a class="nav-link flex" @onclick="Logout">
            <svg class="logout-icon" viewBox="0 0 24 24" fill="none">
                <path d="M15 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h10"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                <path d="M19 12H9m10 0-3-3m3 3-3 3"
                      stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            <span>Logout</span>
        </a>
    </div>
</nav>

@code {
    [CascadingParameter] public MainLayout? Layout { get; set; }
    // =====================
    // 🪟 Nav management
    // =====================
    private bool isNavVisible = true;
    private bool isMobileMenuOpen = false;
    private bool isDarkMode = true;
    private double hoverThreshold = 100;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (JS != null)
            {
                await JS.InvokeVoidAsync("initNavScroll",
                    DotNetObjectReference.Create(this));

                isDarkMode = await JS.InvokeAsync<bool>("themeToggle.initialize");
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public void OnScroll(double scrollY, bool isScrollingUp, bool isNearTop)
    {
        bool shouldShow = isScrollingUp || isNearTop;

        if (isNavVisible != shouldShow)
        {
            isNavVisible = shouldShow;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnMouseMove(double mouseY)
    {
        if (mouseY < hoverThreshold && !isNavVisible)
        {
            isNavVisible = true;
            StateHasChanged();
        }
    }

    private void ToggleMobileMenu()
    {
        isMobileMenuOpen = !isMobileMenuOpen;
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        await JS.InvokeVoidAsync("themeToggle.setTheme", isDarkMode ? "dark" : "light");
    }

    public void Dispose()
    {
        if (JS != null)
        {
            _ = JS.InvokeVoidAsync("cleanupNavScroll");
        }
    }

    public void OnClickButtonPostNovel()
    {
        Navigation.NavigateTo(Router.PostNovelUrl);
        if (Layout != null)
        {
            Layout?.OnClickOnPostNovel?.Invoke();            
        }
    }

    public async void Logout()
    {
        await AuthService.Logout();
    }
}
