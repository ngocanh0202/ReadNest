@using ReadNest_Models
@using ReadNest_FE.Components.DisplayContent
@using ReadNest_FE.Utils
@using ReadNest_FE.Components.Editor
@using ReadNest_FE.Components.ToggleModeSwitch
@using ReadNest_FE.Models
@layout LayoutForReader
@inject ReadNest_FE.Store.Store Store
@inject IJSRuntime Js
@inject ReadNest_FE.Interfaces.IChapterService ChapterService
@inject ReadNest_FE.Interfaces.IContentService ContentService
@inject ReadNest_FE.Interfaces.IReadingHistoryService ReadingHistoryService
@page "/chapter/{Id}"

<PageTitle>@(currentChapter?.ChapterName ?? "Chapter")</PageTitle>

<div class="flex flex-col justify-center">
    @if (currentChapter is not null)
    {
        <div class="reader-chapter">
            <div class="title !line-clamp-6">@currentChapter.VolumnName</div>
            <div class="sub-title !line-clamp-10">@currentChapter.ChapterName</div>
            <div class="sub-p">
                Length: @lenghWords words – Updated: @timeAgo
            </div>
        </div>
    }   
    <div class="reader-text mb-4 mt-[2rem]">
        @if (Contents is not null && Contents.Any())
        {
            @foreach (var c in Contents)
            {
                if (!string.IsNullOrEmpty(c.ImageId))
                {
                    <p>
                        <img src="@c.ImageUrl" />
                    </p>
                }
                else
                {
                    <p class="!px-2">
                        @((MarkupString)c.P!)
                    </p>
                }
            }
        }
    </div>
</div>

@code {

    // SETTING //
    [Parameter] public string? Id { get; set; }
    [CascadingParameter] private LayoutForReader? Layout { get; set; }
    Response<DetailChapter>? response;
    DetailChapter? detailChapter;
    ChapterOverview? currentChapter;
    string? lenghWords;
    string? timeAgo;
    List<ContentDto>? Contents { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await OnLoadChapter();
        await Js.InvokeVoidAsync("reader.scrollToSelector", ".reader-chapter");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Layout != null)
            {
                if (Layout is not null)
                {
                    Layout.OnNotifyChangeChapter -= OnChangeChapter;
                    Layout.OnNotifyChangeChapter += OnChangeChapter;
                }
            }
        }
    }

    async Task OnLoadChapter()
    {
        try
        {
            response = await ChapterService.GetDetailChapterById(Id!);
            if (response?.Success == true && response.Data is not null)
            {
                detailChapter = response.Data;

                if (detailChapter?.Contents is not null)
                {
                    Contents = detailChapter?.Contents;
                }
                currentChapter = detailChapter?.CurrentChapter;
                lenghWords = Utils.GetLengthWords(detailChapter?.Contents!);
                var updateDate = currentChapter?.UpdateDate;
                if (updateDate.HasValue)
                {
                    timeAgo = Utils.GetTimeAgo(updateDate.Value);
                }
                Layout?.LoadChapters(
                    detailChapter?.CurrentChapter?.NovelId!,
                    detailChapter?.CurrentChapter?.Id!,
                    detailChapter?.NextChapter?.Id!,
                    detailChapter?.PrevChapter?.Id!
                );

                await ReadingHistoryService.Post(new ReadingHistory
                {
                    NovelId = currentChapter?.NovelId!,
                    VolumnId = currentChapter?.VolumnId!,
                    ChapterId = Id!,
                });

                await UpdateReadingHistoryLocal();
            }
        }
        catch(Exception ex)
        {
            Layout?.ShowAlert(ex.Message, "error");
        }
        finally
        {
            Console.WriteLine("Load Chapter finally");
            await Js.InvokeVoidAsync("reader.scrollToSelector", ".reader-chapter");
        }
    }

    private async Task UpdateReadingHistoryLocal()
    {
        if (currentChapter is null)
            return;

        Store.readingHistories ??= new List<ReadingHistoryDto>();

        var existing = Store.readingHistories.FirstOrDefault(x => x.NovelId == currentChapter.NovelId && x.ChapterId == Id);
        if (existing != null)
        {
            Store.readingHistories.Remove(existing);
            Store.readingHistories.Insert(0, existing);
            await Js.InvokeVoidAsync(
                "localStorage.setItem",
                "readingHistories",
                System.Text.Json.JsonSerializer.Serialize(Store.readingHistories)
            );
        }
        else
        {
            await ReadingHistoryService.Get();
        }
    }

    async void OnChangeChapter(string newChapterId)
    {
        Id = newChapterId;
        await OnLoadChapter();
    }
}
